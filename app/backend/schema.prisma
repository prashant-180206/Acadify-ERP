generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model course {
  course_id     Int     @id
  course_name   String? @db.VarChar(100)
  credits       Int?
  num_lectures  Int?
  department_id Int?
  semester      Int?

  // Back relation fields
  teacher_courses teacher_course[]
  lectures        lecture[]
  attendances     attendance[]
}

model department {
  d_id  Int     @id
  name  String  @db.VarChar(100)
  HodId Int?
  Email String? @db.VarChar(100)
}

model students {
  PRN_Number         Int       @id
  Password           String?   @db.VarChar(50)
  First_Name         String?   @db.VarChar(50)
  Middle_Name        String?   @db.VarChar(50)
  Last_Name          String?   @db.VarChar(50)
  Name               String?   @db.VarChar(100)
  Mothers_Name       String?   @db.VarChar(100)
  Email              String?   @db.VarChar(100)
  Gender             gender?
  Date_of_Birth      DateTime? @db.Date
  Date_of_Admission  DateTime? @db.Date
  Street_and_House   String?   @db.VarChar(100)
  City               String?   @db.VarChar(50)
  State              String?   @db.VarChar(50)
  PIN_Code           String?   @db.VarChar(10)
  Contact_Number     String?   @db.VarChar(15)
  Aadhar_Card_Number String?   @db.VarChar(20)
  Department_id      Int?
  Class              String?   @db.VarChar(10)
  Roll_No            String?   @db.VarChar(10)
  HSC_Score          Float?    @db.Float
  CET_Percentile     Float?    @db.Float
  Semester           String?   @db.VarChar(10)
  Category           String?   @db.VarChar(20)
  Year               Int?
}

model teacher {
  t_id           Int                 @id @default(autoincrement())
  gender         gender
  qualification  String              @db.VarChar(100)
  designation    teacher_designation
  email          String              @unique(map: "email") @db.VarChar(100)
  password       String              @db.VarChar(255)
  contact_number String?             @db.VarChar(15)
  join_date      DateTime            @db.Date
  department_id  Int?
  name           String?             @db.VarChar(40)
  salary         Int?

  // Back relation fields
  teacher_courses teacher_course[]
  lectures        lecture[]
  attendances     attendance[]
}

model teacher_course {
  id         Int @id @default(autoincrement())
  teacher_id Int
  course_id  Int

  teacher teacher @relation(fields: [teacher_id], references: [t_id], onDelete: Cascade)
  course  course  @relation(fields: [course_id], references: [course_id], onDelete: Cascade)

  @@unique([teacher_id, course_id])
}

model lecture {
  id           Int      @id @default(autoincrement())
  course_id    Int
  teacher_id   Int
  lecture_date DateTime
  topic        String?  @db.VarChar(255)

  course  course  @relation(fields: [course_id], references: [course_id], onDelete: Cascade)
  teacher teacher @relation(fields: [teacher_id], references: [t_id], onDelete: Cascade)
}

model attendance {
  id         Int      @id @default(autoincrement())
  course_id  Int
  date       DateTime
  present    Boolean
  teacher_id Int

  course  course  @relation(fields: [course_id], references: [course_id], onDelete: Cascade)
  teacher teacher @relation(fields: [teacher_id], references: [t_id], onDelete: Cascade)

  @@unique([course_id, date, teacher_id])
}

model assignment_submission {
  submission_id       Int       @id @default(autoincrement())
  assignment_id       Int
  student_course_code String    @db.VarChar(50)
  submissionDate      DateTime? @db.DateTime
  status              String    @db.VarChar(50)
  grade               String?   @db.VarChar(20)
  remarks             String?   @db.VarChar(255)
}

enum gender {
  Male
  Female
  Other
}

enum teacher_designation {
  Lecturer
  HOD
}